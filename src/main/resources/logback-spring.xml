<configuration scan="true" scanPeriod="60" debug="false">
    <!-- 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称 -->
    <contextName>Detrust</contextName>
    <!--<property name="log.path" value="E:\\logback.log"></property>-->

    <!--输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--
        对日志进行编码
            %d{HH: mm:ss.SSS}——日志输出时间
            %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            %-5level——日志级别，并且使用5个字符靠左对齐
            %logger{36}——日志输出者的名字
            %msg——日志消息
            %n——平台的换行符
        -->
        <encoder>
            <pattern>[%d{HH:mm:ss.SSS}] [%contextName] [%thread] [%-5level] [%logger{30}] [%X{method}] - 【%msg】%n</pattern>
        </encoder>
    </appender>

    <!--输出到可拆分的文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志的切分方式——把每一天的日志归档到一个文件中-->
            <fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--只保留最近30天的日志，以防止日志填满整个磁盘空间-->
            <maxHistory>30</maxHistory>
            <!--指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志-->
            <totalSizeCap>10MB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>[%d{HH:mm:ss.SSS}] [%contextName] [%thread] [%-5level] [%logger{30}] [%X{method}] - 【%msg】%n</pattern>
        </encoder>
    </appender>

    <!--用来指定最基础的日志输出级别，只有一个level属性-->
    <root level="debug">
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
    </root>

    <!--用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>-->
    <!--name:用来指定受此loger约束的某一个包或者具体的某一个类
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF
        addtivity:是否向上级loger传递打印信息。默认是true。
    -->
    <logger name="com.hankal.detrust">
    </logger>

    <logger name="com.hankal.detrust" level="debug" additivity="false">
        <appender-ref ref="console"></appender-ref>
    </logger>

    <!--多环境日志输出 (prod:生产环境，test:测试环境，dev:开发环境)
     可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为：
        java -jar xxx.jar 双横线spring.profiles.active=prod
    -->
    <springProfile name="test,dev">
        <logger name="com.hankal.detrust" level="info"></logger>
    </springProfile>

    <springProfile name="prod">
        <logger name="com.hankal.detrust" level="error"></logger>
    </springProfile>

</configuration>